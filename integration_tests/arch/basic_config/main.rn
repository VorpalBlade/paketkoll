/// System configuration
pub fn phase_system_discovery(props, settings) {
    dbg("System discovery phase");
    props.set("user.test", 123);
    settings.set_file_backend("pacman")?;
    settings.enable_pkg_backend("pacman")?;
    settings.enable_pkg_backend("flatpak")?;

    settings.set_diff(["diff", "-Naur"]);
    settings.set_pager(["cat"]);

    settings.early_config("/etc/pacman.conf");

    let sysinfo = sysinfo::SysInfo::new();
    // Do not print host name, it is not stable across runs
    println!("Configuring for distro: {}", sysinfo.os_id());
    dbg(sysinfo.architecture());

    settings.set_save_prefix("ctx.");

    Ok(())
}

pub fn phase_ignores(props, cmds) {
    dbg("Ignore phase");
    cmds.ignore_path("/var/named");

    cmds.ignore_path("/etc/pacman.d/gnupg");
    cmds.ignore_path("/var/lib/pacman");

    // No recursive things please
    cmds.ignore_path("/test_dir");

    // Container image is stripped down
    cmds.ignore_path("/usr/share/doc");
    cmds.ignore_path("/usr/share/gtk-doc");
    cmds.ignore_path("/usr/share/i18n");
    cmds.ignore_path("/usr/share/info");
    cmds.ignore_path("/usr/share/locale");
    cmds.ignore_path("/usr/share/man");
    cmds.ignore_path("/usr/share/X11/locale");


    // Systemd
    cmds.ignore_path("/etc/.updated");
    cmds.ignore_path("/etc/machine-id");
    cmds.ignore_path("/etc/udev/hwdb.bin");
    cmds.ignore_path("/usr/lib/udev/hwdb.bin");
    cmds.ignore_path("/usr/share/hwdata/*.old");
    cmds.ignore_path("/var/.updated");
    cmds.ignore_path("/var/lib/systemd/*");

    // glibc
    cmds.ignore_path("/etc/ld.so.cache");

    // etckeeper
    cmds.ignore_path("/etc/.git");
    cmds.ignore_path("/etc/.etckeeper");

    // dkms
    cmds.ignore_path("/var/lib/dkms/*");
    cmds.ignore_path("/usr/lib/modules/*/updates/dkms/*");

    // Kernel
    cmds.ignore_path("/usr/lib/modules/*/modules.*");
    cmds.ignore_path("/usr/lib/modules/*"); // kernel-modules-hook

    // Networking
    cmds.ignore_path("/etc/resolv.conf");

    // Fonts
    cmds.ignore_path("/usr/share/fonts/*/fonts.dir");
    cmds.ignore_path("/usr/share/fonts/*/fonts.scale");

    // Other software
    cmds.ignore_path("/etc/audit/audit.rules.prev");
    cmds.ignore_path("/etc/audit/audit.rules");
    cmds.ignore_path("/etc/fonts/conf.d/*"); // Managed by pacman hook
    cmds.ignore_path("/etc/passwd.OLD");
    cmds.ignore_path("/usr/share/icons/*/*.cache");
    cmds.ignore_path("/usr/share/info/dir");
    cmds.ignore_path("/usr/share/perl5/vendor_perl/XML/SAX/ParserDetails.ini"); // Managed by post install script
    cmds.ignore_path("/var/db/sudo");
    cmds.ignore_path("/var/lib/AccountsService");
    cmds.ignore_path("/var/lib/blueman");
    cmds.ignore_path("/var/lib/bluetooth");
    cmds.ignore_path("/var/lib/boltd");
    cmds.ignore_path("/var/lib/btrfs");
    cmds.ignore_path("/var/lib/rkhunter");
    cmds.ignore_path("/var/lib/upower");


    cmds.ignore_path("/var/cache"); // tmpfiles.d
    cmds.ignore_path("/var/empty"); // tmpfiles.d
    cmds.ignore_path("/var/lib/colord"); // tmpfiles.d
    cmds.ignore_path("/var/lib/dbus"); // tmpfiles.d
    cmds.ignore_path("/var/lib/geoclue"); // tmpfiles.d
    cmds.ignore_path("/var/lib/machines"); // tmpfiles.d
    cmds.ignore_path("/var/lib/portables"); // tmpfiles.d
    cmds.ignore_path("/var/lib/private"); // tmpfiles.d
    cmds.ignore_path("/var/lib/rpcbind"); // tmpfiles.d
    cmds.ignore_path("/var/lib/systemd"); // tmpfiles.d
    cmds.ignore_path("/var/lib/tpm2-tss"); // tmpfiles.d
    cmds.ignore_path("/var/log"); // tmpfiles.d
    cmds.ignore_path("/var/log/journal"); // tmpfiles.d
    cmds.ignore_path("/var/spool"); // tmpfiles.d
    cmds.ignore_path("/var/tmp"); // tmpfiles.d

    // Post install script overrides file properties (suid -> file caps);
    cmds.ignore_path("/usr/bin/newgidmap");
    cmds.ignore_path("/usr/bin/newuidmap");

    // tmpfiles.d overrides modes
    cmds.ignore_path("/usr/lib/utempter/utempter");

    // Various
    cmds.ignore_path("/usr/lib/*/*.cache");
    cmds.ignore_path("/usr/lib/*/*/*.cache");
    cmds.ignore_path("/usr/lib32/*/*.cache");
    cmds.ignore_path("/usr/lib32/*/*/*.cache");
    //cmds.ignore_path("/usr/lib/python3.*/site-packages/*");
    cmds.ignore_path("/usr/share/gdb/python/gdb/*");

    // Basics
    cmds.ignore_path("/boot");
    cmds.ignore_path("/efi");
    cmds.ignore_path("/etc/adjtime");

    // TODO: Investigate
    cmds.ignore_path("/etc/arch-release");
    cmds.ignore_path("/etc/os-release");

    cmds.ignore_path("/etc/.pwd.lock");
    cmds.ignore_path("/etc/ca-certificates/extracted/*");
    cmds.ignore_path("/etc/ssl/certs/*");
    cmds.ignore_path("/usr/lib/ghc-*/package.conf.d/*");
    cmds.ignore_path("/usr/lib/ghc-*/lib/package.conf.d/*");
    cmds.ignore_path("/usr/lib/graphviz/config6");
    cmds.ignore_path("/usr/lib/jvm/default*");
    cmds.ignore_path("/usr/lib/locale/locale-archive");
    cmds.ignore_path("/usr/share/.mono/*");
    cmds.ignore_path("/usr/share/applications/defaults.list");
    cmds.ignore_path("/usr/share/applications/mimeinfo.cache");
    cmds.ignore_path("/usr/share/glib-2.0/schemas/gschemas.compiled");
    cmds.ignore_path("/usr/share/mime/*");
    cmds.ignore_path("__pycache__");

    cmds.ignore_path("/var/lib/flatpak");
    cmds.ignore_path("/var/local");

    Ok(())
}

pub fn phase_script_dependencies(props, cmds) {
    dbg("Script dependencies phase");
    Ok(())
}

use patch::LineEditor;
use patch::Action;
use patch::Selector;

pub async fn phase_main(props, cmds, package_managers) {
    dbg("Main phase");
    // Generate various debug output we can compare against
    dbg(props.get("user.test"));

    let pkgs = package_managers.get("pacman")?;
    dbg(String::from_utf8(pkgs.original_file_contents("filesystem", "/etc/ld.so.conf")?));

    let passwd = filesystem::File::open("/etc/ld.so.conf")?;
    dbg(passwd.read_all_string());

    // Test command execution
    let cmd = process::Command::new("ls");
    cmd.arg("-l");
    cmd.arg("/etc");
    cmd.stdout(process::Stdio::piped());
    let child = cmd.spawn()?;
    let cmd2 = process::Command::new("grep");
    cmd2.arg("release");
    cmd2.stdin(child.stdout().unwrap().try_into_stdio()?);
    let child2 = cmd2.spawn()?;
    let output = child2.wait_with_output().await?;
    //let output = child.wait_with_output().await?;
    std::io::dbg!("output:", String::from_utf8(output.stdout));

    let edit_program = LineEditor::new();
    edit_program.add(Selector::All, Action::RegexReplaceAll("f(o|a)o", "b${1}r"))?;
    edit_program.add(Selector::Regex("^q"), Action::Function(|s| s + " hi there"))?;
    let edited = edit_program.apply("foo\nbar\nfao\nquux\n");
    dbg(edited);

    // Generate file changes
    cmds.mkdir("/nosuchdir")?;
    cmds.copy("/dummy.txt")?;
    cmds.write("/dummy2.txt", b"Hi, world!")?;

    // These are in our images
    cmds.add_pkg("pacman", "base")?; // Minimal package set to define a basic Arch Linux installation
    cmds.add_pkg("pacman", "base-devel")?; // Basic tools to build Arch Linux packages
    cmds.add_pkg("pacman", "flatpak")?; // Linux application sandboxing and distribution framework (formerly xdg-app)

    // This we want to add
    cmds.add_pkg("pacman", "nano")?; // Basic tools to build Arch Linux packages

    // We skip out on git (which is in our image) so we can test that case

    Ok(())
}
